
Timer_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001a72  00001b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00001b0e  2**0
                  ALLOC
  3 .stab         000011b8  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b27  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000392f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00003a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000056e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000065d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007380  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000776d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00007f3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e7       	ldi	r30, 0x72	; 114
      78:	fa e1       	ldi	r31, 0x1A	; 26
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <main>
      8a:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_vidSetPinDir>:

#include "DIO_priv.h"


void Dio_vidSetPinDir(u8 Pin,u8 Dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Dio_vidSetPinDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Dio_vidSetPinDir+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <Dio_vidSetPinDir+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_u8Port;
	u8 Loc_u8Pin;
	Loc_u8Port=Pin/8;
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	86 95       	lsr	r24
     b5c:	86 95       	lsr	r24
     b5e:	86 95       	lsr	r24
     b60:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8Pin=Pin%8;
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	87 70       	andi	r24, 0x07	; 7
     b66:	89 83       	std	Y+1, r24	; 0x01
	switch(Loc_u8Port)
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3e 83       	std	Y+6, r19	; 0x06
     b70:	2d 83       	std	Y+5, r18	; 0x05
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	9e 81       	ldd	r25, Y+6	; 0x06
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <Dio_vidSetPinDir+0x38>
     b7c:	43 c0       	rjmp	.+134    	; 0xc04 <Dio_vidSetPinDir+0xbe>
     b7e:	2d 81       	ldd	r18, Y+5	; 0x05
     b80:	3e 81       	ldd	r19, Y+6	; 0x06
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	2c f4       	brge	.+10     	; 0xb92 <Dio_vidSetPinDir+0x4c>
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	71 f0       	breq	.+28     	; 0xbac <Dio_vidSetPinDir+0x66>
     b90:	bc c0       	rjmp	.+376    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
     b92:	2d 81       	ldd	r18, Y+5	; 0x05
     b94:	3e 81       	ldd	r19, Y+6	; 0x06
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <Dio_vidSetPinDir+0x58>
     b9c:	5f c0       	rjmp	.+190    	; 0xc5c <Dio_vidSetPinDir+0x116>
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <Dio_vidSetPinDir+0x64>
     ba8:	85 c0       	rjmp	.+266    	; 0xcb4 <Dio_vidSetPinDir+0x16e>
     baa:	af c0       	rjmp	.+350    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
	{
	case 0:
		if (Dir==1)
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	a1 f4       	brne	.+40     	; 0xbda <Dio_vidSetPinDir+0x94>
		{
			SET_BIT(DDRA,Loc_u8Pin);
     bb2:	aa e3       	ldi	r26, 0x3A	; 58
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e3       	ldi	r30, 0x3A	; 58
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <Dio_vidSetPinDir+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <Dio_vidSetPinDir+0x86>
     bd4:	84 2b       	or	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	98 c0       	rjmp	.+304    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else
		{
			CLEAR_BIT(DDRA,Loc_u8Pin);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <Dio_vidSetPinDir+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <Dio_vidSetPinDir+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	83 c0       	rjmp	.+262    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 1:
		if (Dir==1)
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	a1 f4       	brne	.+40     	; 0xc32 <Dio_vidSetPinDir+0xec>
		{
			SET_BIT(DDRB,Loc_u8Pin);
     c0a:	a7 e3       	ldi	r26, 0x37	; 55
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e7 e3       	ldi	r30, 0x37	; 55
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <Dio_vidSetPinDir+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <Dio_vidSetPinDir+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	6c c0       	rjmp	.+216    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else
		{
			CLEAR_BIT(DDRB,Loc_u8Pin);
     c32:	a7 e3       	ldi	r26, 0x37	; 55
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e3       	ldi	r30, 0x37	; 55
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <Dio_vidSetPinDir+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <Dio_vidSetPinDir+0x106>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	57 c0       	rjmp	.+174    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 2:
		if (Dir==1)
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	a1 f4       	brne	.+40     	; 0xc8a <Dio_vidSetPinDir+0x144>
		{
			SET_BIT(DDRC,Loc_u8Pin);
     c62:	a4 e3       	ldi	r26, 0x34	; 52
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e4 e3       	ldi	r30, 0x34	; 52
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <Dio_vidSetPinDir+0x13a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <Dio_vidSetPinDir+0x136>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	40 c0       	rjmp	.+128    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else
		{
			CLEAR_BIT(DDRC,Loc_u8Pin);
     c8a:	a4 e3       	ldi	r26, 0x34	; 52
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e4 e3       	ldi	r30, 0x34	; 52
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <Dio_vidSetPinDir+0x162>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <Dio_vidSetPinDir+0x15e>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	2b c0       	rjmp	.+86     	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 3:
		if (Dir==1)
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <Dio_vidSetPinDir+0x19c>
		{
			SET_BIT(DDRD,Loc_u8Pin);
     cba:	a1 e3       	ldi	r26, 0x31	; 49
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <Dio_vidSetPinDir+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <Dio_vidSetPinDir+0x18e>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else
		{
			CLEAR_BIT(DDRD,Loc_u8Pin);
     ce2:	a1 e3       	ldi	r26, 0x31	; 49
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e1 e3       	ldi	r30, 0x31	; 49
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <Dio_vidSetPinDir+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <Dio_vidSetPinDir+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
		}
		break;
	}

}
     d0a:	26 96       	adiw	r28, 0x06	; 6
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin,u8 Val)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <Dio_vidSetPinVal+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <Dio_vidSetPinVal+0x8>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <Dio_vidSetPinVal+0xa>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_u8Port;
	u8 Loc_u8Pin;
	Loc_u8Port=Pin/8;
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	86 95       	lsr	r24
     d32:	86 95       	lsr	r24
     d34:	86 95       	lsr	r24
     d36:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8Pin=Pin%8;
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	87 70       	andi	r24, 0x07	; 7
     d3c:	89 83       	std	Y+1, r24	; 0x01
	switch(Loc_u8Port)
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3e 83       	std	Y+6, r19	; 0x06
     d46:	2d 83       	std	Y+5, r18	; 0x05
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <Dio_vidSetPinVal+0x38>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <Dio_vidSetPinVal+0xbe>
     d54:	2d 81       	ldd	r18, Y+5	; 0x05
     d56:	3e 81       	ldd	r19, Y+6	; 0x06
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	2c f4       	brge	.+10     	; 0xd68 <Dio_vidSetPinVal+0x4c>
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	71 f0       	breq	.+28     	; 0xd82 <Dio_vidSetPinVal+0x66>
     d66:	bc c0       	rjmp	.+376    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
     d68:	2d 81       	ldd	r18, Y+5	; 0x05
     d6a:	3e 81       	ldd	r19, Y+6	; 0x06
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <Dio_vidSetPinVal+0x58>
     d72:	5f c0       	rjmp	.+190    	; 0xe32 <Dio_vidSetPinVal+0x116>
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <Dio_vidSetPinVal+0x64>
     d7e:	85 c0       	rjmp	.+266    	; 0xe8a <Dio_vidSetPinVal+0x16e>
     d80:	af c0       	rjmp	.+350    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
	{
	case 0:
		if (Val==1)
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	a1 f4       	brne	.+40     	; 0xdb0 <Dio_vidSetPinVal+0x94>
		{
			SET_BIT(PORTA,Loc_u8Pin);
     d88:	ab e3       	ldi	r26, 0x3B	; 59
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e3       	ldi	r30, 0x3B	; 59
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <Dio_vidSetPinVal+0x8a>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <Dio_vidSetPinVal+0x86>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	98 c0       	rjmp	.+304    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLEAR_BIT(PORTA,Loc_u8Pin);
     db0:	ab e3       	ldi	r26, 0x3B	; 59
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e3       	ldi	r30, 0x3B	; 59
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <Dio_vidSetPinVal+0xb2>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <Dio_vidSetPinVal+0xae>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	83 c0       	rjmp	.+262    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 1:
		if (Val==1)
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	a1 f4       	brne	.+40     	; 0xe08 <Dio_vidSetPinVal+0xec>
		{
			SET_BIT(PORTB,Loc_u8Pin);
     de0:	a8 e3       	ldi	r26, 0x38	; 56
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 e3       	ldi	r30, 0x38	; 56
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <Dio_vidSetPinVal+0xe2>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <Dio_vidSetPinVal+0xde>
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	6c c0       	rjmp	.+216    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLEAR_BIT(PORTB,Loc_u8Pin);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <Dio_vidSetPinVal+0x10a>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <Dio_vidSetPinVal+0x106>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	57 c0       	rjmp	.+174    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 2:
		if (Val==1)
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <Dio_vidSetPinVal+0x144>
		{
			SET_BIT(PORTC,Loc_u8Pin);
     e38:	a5 e3       	ldi	r26, 0x35	; 53
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <Dio_vidSetPinVal+0x13a>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <Dio_vidSetPinVal+0x136>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	40 c0       	rjmp	.+128    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLEAR_BIT(PORTC,Loc_u8Pin);
     e60:	a5 e3       	ldi	r26, 0x35	; 53
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <Dio_vidSetPinVal+0x162>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <Dio_vidSetPinVal+0x15e>
     e82:	80 95       	com	r24
     e84:	84 23       	and	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	2b c0       	rjmp	.+86     	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 3:
		if (Val==1)
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <Dio_vidSetPinVal+0x19c>
		{
			SET_BIT(PORTD,Loc_u8Pin);
     e90:	a2 e3       	ldi	r26, 0x32	; 50
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e2 e3       	ldi	r30, 0x32	; 50
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <Dio_vidSetPinVal+0x192>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <Dio_vidSetPinVal+0x18e>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLEAR_BIT(PORTD,Loc_u8Pin);
     eb8:	a2 e3       	ldi	r26, 0x32	; 50
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e3       	ldi	r30, 0x32	; 50
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <Dio_vidSetPinVal+0x1ba>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <Dio_vidSetPinVal+0x1b6>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
		}
		break;
	}
}
     ee0:	26 96       	adiw	r28, 0x06	; 6
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <Dio_u8GetPinVal>:

u8 Dio_u8GetPinVal(u8 Pin)  //to get pin value from keypad to micro controller
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	27 97       	sbiw	r28, 0x07	; 7
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port;
	u8 Loc_u8pin;
	Loc_u8Port =Pin / 8;
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	86 95       	lsr	r24
     f0c:	86 95       	lsr	r24
     f0e:	86 95       	lsr	r24
     f10:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8pin = Pin % 8;
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	87 70       	andi	r24, 0x07	; 7
     f16:	89 83       	std	Y+1, r24	; 0x01
	switch(Loc_u8Port)
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	3e 83       	std	Y+6, r19	; 0x06
     f20:	2d 83       	std	Y+5, r18	; 0x05
     f22:	4d 81       	ldd	r20, Y+5	; 0x05
     f24:	5e 81       	ldd	r21, Y+6	; 0x06
     f26:	41 30       	cpi	r20, 0x01	; 1
     f28:	51 05       	cpc	r21, r1
     f2a:	49 f1       	breq	.+82     	; 0xf7e <Dio_u8GetPinVal+0x8c>
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	91 05       	cpc	r25, r1
     f34:	34 f4       	brge	.+12     	; 0xf42 <Dio_u8GetPinVal+0x50>
     f36:	2d 81       	ldd	r18, Y+5	; 0x05
     f38:	3e 81       	ldd	r19, Y+6	; 0x06
     f3a:	21 15       	cp	r18, r1
     f3c:	31 05       	cpc	r19, r1
     f3e:	61 f0       	breq	.+24     	; 0xf58 <Dio_u8GetPinVal+0x66>
     f40:	57 c0       	rjmp	.+174    	; 0xff0 <Dio_u8GetPinVal+0xfe>
     f42:	4d 81       	ldd	r20, Y+5	; 0x05
     f44:	5e 81       	ldd	r21, Y+6	; 0x06
     f46:	42 30       	cpi	r20, 0x02	; 2
     f48:	51 05       	cpc	r21, r1
     f4a:	61 f1       	breq	.+88     	; 0xfa4 <Dio_u8GetPinVal+0xb2>
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	83 30       	cpi	r24, 0x03	; 3
     f52:	91 05       	cpc	r25, r1
     f54:	d1 f1       	breq	.+116    	; 0xfca <Dio_u8GetPinVal+0xd8>
     f56:	4c c0       	rjmp	.+152    	; 0xff0 <Dio_u8GetPinVal+0xfe>
	{
	case 0:
		return GET_BIT(PINA,Loc_u8pin);
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <Dio_u8GetPinVal+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <Dio_u8GetPinVal+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	58 2f       	mov	r21, r24
     f78:	51 70       	andi	r21, 0x01	; 1
     f7a:	5c 83       	std	Y+4, r21	; 0x04
     f7c:	3a c0       	rjmp	.+116    	; 0xff2 <Dio_u8GetPinVal+0x100>
		break ;
	case 1:
		return GET_BIT(PINB,Loc_u8pin);
     f7e:	e6 e3       	ldi	r30, 0x36	; 54
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a9 01       	movw	r20, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <Dio_u8GetPinVal+0xa4>
     f92:	55 95       	asr	r21
     f94:	47 95       	ror	r20
     f96:	8a 95       	dec	r24
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <Dio_u8GetPinVal+0xa0>
     f9a:	ca 01       	movw	r24, r20
     f9c:	58 2f       	mov	r21, r24
     f9e:	51 70       	andi	r21, 0x01	; 1
     fa0:	5c 83       	std	Y+4, r21	; 0x04
     fa2:	27 c0       	rjmp	.+78     	; 0xff2 <Dio_u8GetPinVal+0x100>
		break ;
	case 2:
		return GET_BIT(PINC,Loc_u8pin);
     fa4:	e3 e3       	ldi	r30, 0x33	; 51
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a9 01       	movw	r20, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <Dio_u8GetPinVal+0xca>
     fb8:	55 95       	asr	r21
     fba:	47 95       	ror	r20
     fbc:	8a 95       	dec	r24
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <Dio_u8GetPinVal+0xc6>
     fc0:	ca 01       	movw	r24, r20
     fc2:	58 2f       	mov	r21, r24
     fc4:	51 70       	andi	r21, 0x01	; 1
     fc6:	5c 83       	std	Y+4, r21	; 0x04
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <Dio_u8GetPinVal+0x100>
		break ;
	case 3:
		return GET_BIT(PIND,Loc_u8pin);
     fca:	e0 e3       	ldi	r30, 0x30	; 48
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a9 01       	movw	r20, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <Dio_u8GetPinVal+0xf0>
     fde:	55 95       	asr	r21
     fe0:	47 95       	ror	r20
     fe2:	8a 95       	dec	r24
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <Dio_u8GetPinVal+0xec>
     fe6:	ca 01       	movw	r24, r20
     fe8:	58 2f       	mov	r21, r24
     fea:	51 70       	andi	r21, 0x01	; 1
     fec:	5c 83       	std	Y+4, r21	; 0x04
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <Dio_u8GetPinVal+0x100>
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <Dio_u8GetPinVal+0x104>
		break ;
	}

}
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	8f 83       	std	Y+7, r24	; 0x07
     ff6:	8f 81       	ldd	r24, Y+7	; 0x07
     ff8:	27 96       	adiw	r28, 0x07	; 7
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <Dio_vidTglPinVal>:

void Dio_vidTglPinVal(u8 Pin)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <Dio_vidTglPinVal+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <Dio_vidTglPinVal+0x8>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port;
	u8 Loc_u8Pin;
	Loc_u8Port=Pin/8;
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	86 95       	lsr	r24
    101e:	86 95       	lsr	r24
    1020:	86 95       	lsr	r24
    1022:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8Pin=Pin%8;
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	87 70       	andi	r24, 0x07	; 7
    1028:	89 83       	std	Y+1, r24	; 0x01
	switch(Loc_u8Port)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3d 83       	std	Y+5, r19	; 0x05
    1032:	2c 83       	std	Y+4, r18	; 0x04
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	9d 81       	ldd	r25, Y+5	; 0x05
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	91 05       	cpc	r25, r1
    103c:	49 f1       	breq	.+82     	; 0x1090 <Dio_vidTglPinVal+0x86>
    103e:	2c 81       	ldd	r18, Y+4	; 0x04
    1040:	3d 81       	ldd	r19, Y+5	; 0x05
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	2c f4       	brge	.+10     	; 0x1052 <Dio_vidTglPinVal+0x48>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	61 f0       	breq	.+24     	; 0x1068 <Dio_vidTglPinVal+0x5e>
    1050:	5a c0       	rjmp	.+180    	; 0x1106 <Dio_vidTglPinVal+0xfc>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	71 f1       	breq	.+92     	; 0x10b8 <Dio_vidTglPinVal+0xae>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	e9 f1       	breq	.+122    	; 0x10e0 <Dio_vidTglPinVal+0xd6>
    1066:	4f c0       	rjmp	.+158    	; 0x1106 <Dio_vidTglPinVal+0xfc>
	{
	case 0:
			TOGGLE_BIT(PORTA,Loc_u8Pin);
    1068:	ab e3       	ldi	r26, 0x3B	; 59
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	eb e3       	ldi	r30, 0x3B	; 59
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <Dio_vidTglPinVal+0x7c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <Dio_vidTglPinVal+0x78>
    108a:	84 27       	eor	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	3b c0       	rjmp	.+118    	; 0x1106 <Dio_vidTglPinVal+0xfc>
		break;
	case 1:
		TOGGLE_BIT(PORTB,Loc_u8Pin);
    1090:	a8 e3       	ldi	r26, 0x38	; 56
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e8 e3       	ldi	r30, 0x38	; 56
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <Dio_vidTglPinVal+0xa4>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <Dio_vidTglPinVal+0xa0>
    10b2:	84 27       	eor	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	27 c0       	rjmp	.+78     	; 0x1106 <Dio_vidTglPinVal+0xfc>
		break;
	case 2:
		TOGGLE_BIT(PORTC,Loc_u8Pin);
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Dio_vidTglPinVal+0xcc>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <Dio_vidTglPinVal+0xc8>
    10da:	84 27       	eor	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	13 c0       	rjmp	.+38     	; 0x1106 <Dio_vidTglPinVal+0xfc>
		break;
	case 3:
		TOGGLE_BIT(PORTD,Loc_u8Pin);
    10e0:	a2 e3       	ldi	r26, 0x32	; 50
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e2 e3       	ldi	r30, 0x32	; 50
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <Dio_vidTglPinVal+0xf4>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <Dio_vidTglPinVal+0xf0>
    1102:	84 27       	eor	r24, r20
    1104:	8c 93       	st	X, r24
		break;
	}
}
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <Timer_vidTimer0Init>:
#include "Timer_int.h"
#include "Timer_priv.h"
//#include <avr/io.h>

void Timer_vidTimer0Init(u8 mode)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	89 83       	std	Y+1, r24	; 0x01
	if(mode == Timer0_NormalMode)
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	e9 f4       	brne	.+58     	; 0x1162 <Timer_vidTimer0Init+0x4c>
	{
		CLEAR_BIT(TCCR0,3);
    1128:	a3 e5       	ldi	r26, 0x53	; 83
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e3 e5       	ldi	r30, 0x53	; 83
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	87 7f       	andi	r24, 0xF7	; 247
    1134:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,6);
    1136:	a3 e5       	ldi	r26, 0x53	; 83
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e3 e5       	ldi	r30, 0x53	; 83
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8f 7b       	andi	r24, 0xBF	; 191
    1142:	8c 93       	st	X, r24

		//compare Output mode
#if Timer0_NonPWMCmprOtptMode == Timer0_OC0Disconnected
		CLEAR_BIT(TCCR0,5);
    1144:	a3 e5       	ldi	r26, 0x53	; 83
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e3 e5       	ldi	r30, 0x53	; 83
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8f 7d       	andi	r24, 0xDF	; 223
    1150:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,4);
    1152:	a3 e5       	ldi	r26, 0x53	; 83
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e3 e5       	ldi	r30, 0x53	; 83
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8f 7e       	andi	r24, 0xEF	; 239
    115e:	8c 93       	st	X, r24
    1160:	5f c0       	rjmp	.+190    	; 0x1220 <Timer_vidTimer0Init+0x10a>

#endif
		/******************************************************/

	}
	else if(mode == Timer0_PWMPhaseCorrect)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	e9 f4       	brne	.+58     	; 0x11a2 <Timer_vidTimer0Init+0x8c>
	{
		CLEAR_BIT(TCCR0,3);
    1168:	a3 e5       	ldi	r26, 0x53	; 83
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e3 e5       	ldi	r30, 0x53	; 83
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	87 7f       	andi	r24, 0xF7	; 247
    1174:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
    1176:	a3 e5       	ldi	r26, 0x53	; 83
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e3 e5       	ldi	r30, 0x53	; 83
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 64       	ori	r24, 0x40	; 64
    1182:	8c 93       	st	X, r24
#if Timer0_PhaseCorrectPWMCmprOtptMode == Timer0_OC0Disconnected
		CLEAR_BIT(TCCR0,5);
		CLEAR_BIT(TCCR0,4);

#elif Timer0_PhaseCorrectPWMCmprOtptMode == Timer0_ClrOC0UpCountingAndSetOC0DownCouning
		SET_BIT(TCCR0,5);
    1184:	a3 e5       	ldi	r26, 0x53	; 83
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e3 e5       	ldi	r30, 0x53	; 83
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	80 62       	ori	r24, 0x20	; 32
    1190:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,4);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8f 7e       	andi	r24, 0xEF	; 239
    119e:	8c 93       	st	X, r24
    11a0:	3f c0       	rjmp	.+126    	; 0x1220 <Timer_vidTimer0Init+0x10a>

#endif
		/*******************************************************/

	}
	else if(mode == Timer0_CTC)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	e9 f4       	brne	.+58     	; 0x11e2 <Timer_vidTimer0Init+0xcc>
	{
		SET_BIT(TCCR0,3);
    11a8:	a3 e5       	ldi	r26, 0x53	; 83
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e3 e5       	ldi	r30, 0x53	; 83
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	88 60       	ori	r24, 0x08	; 8
    11b4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,6);
    11b6:	a3 e5       	ldi	r26, 0x53	; 83
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e3 e5       	ldi	r30, 0x53	; 83
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8f 7b       	andi	r24, 0xBF	; 191
    11c2:	8c 93       	st	X, r24

		//compare Output mode
#if Timer0_NonPWMCmprOtptMode == Timer0_OC0Disconnected
		CLEAR_BIT(TCCR0,5);
    11c4:	a3 e5       	ldi	r26, 0x53	; 83
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e3 e5       	ldi	r30, 0x53	; 83
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	8f 7d       	andi	r24, 0xDF	; 223
    11d0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,4);
    11d2:	a3 e5       	ldi	r26, 0x53	; 83
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e3 e5       	ldi	r30, 0x53	; 83
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8f 7e       	andi	r24, 0xEF	; 239
    11de:	8c 93       	st	X, r24
    11e0:	1f c0       	rjmp	.+62     	; 0x1220 <Timer_vidTimer0Init+0x10a>

#endif
		/********************************************************/

	}
	else if(mode == Timer0_FastPWM)
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	84 30       	cpi	r24, 0x04	; 4
    11e6:	e1 f4       	brne	.+56     	; 0x1220 <Timer_vidTimer0Init+0x10a>
	{
		SET_BIT(TCCR0,3);
    11e8:	a3 e5       	ldi	r26, 0x53	; 83
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e3 e5       	ldi	r30, 0x53	; 83
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	88 60       	ori	r24, 0x08	; 8
    11f4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
    11f6:	a3 e5       	ldi	r26, 0x53	; 83
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e3 e5       	ldi	r30, 0x53	; 83
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 64       	ori	r24, 0x40	; 64
    1202:	8c 93       	st	X, r24
#if Timer0_FastPWMCmprOtptMode == Timer0_OC0Disconnected
		CLEAR_BIT(TCCR0,5);
		CLEAR_BIT(TCCR0,4);

#elif Timer0_FastPWMCmprOtptMode == Timer0_ClrOC0OnCmprMatchAndSetOC0AtTOP
		SET_BIT(TCCR0,5);
    1204:	a3 e5       	ldi	r26, 0x53	; 83
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e3 e5       	ldi	r30, 0x53	; 83
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 62       	ori	r24, 0x20	; 32
    1210:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,4);
    1212:	a3 e5       	ldi	r26, 0x53	; 83
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e3 e5       	ldi	r30, 0x53	; 83
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8f 7e       	andi	r24, 0xEF	; 239
    121e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
	CLEAR_BIT(TCCR0,1);
	CLEAR_BIT(TCCR0,0);

#elif Timer0_Prescaller ==Timer0_DivisionFactor1024
	SET_BIT(TCCR0,2);
    1220:	a3 e5       	ldi	r26, 0x53	; 83
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e3 e5       	ldi	r30, 0x53	; 83
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	84 60       	ori	r24, 0x04	; 4
    122c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    122e:	a3 e5       	ldi	r26, 0x53	; 83
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e3 e5       	ldi	r30, 0x53	; 83
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
    123c:	a3 e5       	ldi	r26, 0x53	; 83
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	81 60       	ori	r24, 0x01	; 1
    1248:	8c 93       	st	X, r24
#if Timer0_OutputCmprMatchIntr == Timer0_OutputCmprMatchIntrEnable
	SET_BIT(SREG,7);
	SET_BIT(TIMSK,1);

#elif Timer0_OutputCmprMatchIntr == Timer0_OutputCmprMatchIntrDisable
	CLEAR_BIT(TIMSK,1);
    124a:	a9 e5       	ldi	r26, 0x59	; 89
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e9 e5       	ldi	r30, 0x59	; 89
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8d 7f       	andi	r24, 0xFD	; 253
    1256:	8c 93       	st	X, r24
#if Timer0_OverflowIntr == Timer0_OverflowIntrEnable
	SET_BIT(SREG,7);
	SET_BIT(TIMSK,0);

#elif Timer0_OverflowIntr == Timer0_OverflowIntrDisable
	CLEAR_BIT(TIMSK,0);
    1258:	a9 e5       	ldi	r26, 0x59	; 89
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e9 e5       	ldi	r30, 0x59	; 89
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8e 7f       	andi	r24, 0xFE	; 254
    1264:	8c 93       	st	X, r24

#endif

}
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <Timer_vidTimer1Init>:

void Timer_vidTimer1Init(u8 mode,u8 channel)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <Timer_vidTimer1Init+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(TCCR1B,3);
	CLEAR_BIT(TCCR1A,1);
	CLEAR_BIT(TCCR1A,0);

#elif Timer1_Mode ==	Timer1_FastPWM_TopICR1
	SET_BIT(TCCR1B,4);
    127c:	ae e4       	ldi	r26, 0x4E	; 78
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ee e4       	ldi	r30, 0x4E	; 78
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 61       	ori	r24, 0x10	; 16
    1288:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    128a:	ae e4       	ldi	r26, 0x4E	; 78
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ee e4       	ldi	r30, 0x4E	; 78
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	88 60       	ori	r24, 0x08	; 8
    1296:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    1298:	af e4       	ldi	r26, 0x4F	; 79
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ef e4       	ldi	r30, 0x4F	; 79
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,0);
    12a6:	af e4       	ldi	r26, 0x4F	; 79
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ef e4       	ldi	r30, 0x4F	; 79
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8e 7f       	andi	r24, 0xFE	; 254
    12b2:	8c 93       	st	X, r24
	/***************************************************/


	//compare output mode for Non PWM

	if(mode == Timer1_NonPWM && channel == Timer1_ChannelA)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	85 30       	cpi	r24, 0x05	; 5
    12b8:	91 f4       	brne	.+36     	; 0x12de <Timer_vidTimer1Init+0x70>
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	79 f4       	brne	.+30     	; 0x12de <Timer_vidTimer1Init+0x70>
	{
#if Timer1_NonPWMCmprOtptMode == Timer1_OC1AorBDisconnected
		CLEAR_BIT(TCCR1A,7); //for channel A
    12c0:	af e4       	ldi	r26, 0x4F	; 79
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	ef e4       	ldi	r30, 0x4F	; 79
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 77       	andi	r24, 0x7F	; 127
    12cc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,6); //for channel A
    12ce:	af e4       	ldi	r26, 0x4F	; 79
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ef e4       	ldi	r30, 0x4F	; 79
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 7b       	andi	r24, 0xBF	; 191
    12da:	8c 93       	st	X, r24
    12dc:	29 c0       	rjmp	.+82     	; 0x1330 <Timer_vidTimer1Init+0xc2>

	/************************************************/

	//compare output mode for Fast PWM

	else if (mode == Timer1_FastPWM && channel == Timer1_ChannelA)
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	86 30       	cpi	r24, 0x06	; 6
    12e2:	91 f4       	brne	.+36     	; 0x1308 <Timer_vidTimer1Init+0x9a>
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	88 30       	cpi	r24, 0x08	; 8
    12e8:	79 f4       	brne	.+30     	; 0x1308 <Timer_vidTimer1Init+0x9a>
#elif Timer1_FastPWMCmprOtptMode == Timer1_TggleOC1AOnCmprMatchAndOC1BDisconnected
		CLEAR_BIT(TCCR1A,7); //for channel A
		SET_BIT(TCCR1A,6); //for channel A

#elif Timer1_FastPWMCmprOtptMode == Timer1_ClrOC1AorBOnCmprMatchAndSetOC1AorBAtTOP
		SET_BIT(TCCR1A,7); //for channel A
    12ea:	af e4       	ldi	r26, 0x4F	; 79
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ef e4       	ldi	r30, 0x4F	; 79
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,6); //for channel A
    12f8:	af e4       	ldi	r26, 0x4F	; 79
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ef e4       	ldi	r30, 0x4F	; 79
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8f 7b       	andi	r24, 0xBF	; 191
    1304:	8c 93       	st	X, r24
    1306:	14 c0       	rjmp	.+40     	; 0x1330 <Timer_vidTimer1Init+0xc2>

	//************************************/

	//compare Output mode for Phase and Frequency Correct PWM

	else if (mode == Timer1_PhaseAndFreqCorrect && channel == Timer1_ChannelA)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	87 30       	cpi	r24, 0x07	; 7
    130c:	89 f4       	brne	.+34     	; 0x1330 <Timer_vidTimer1Init+0xc2>
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	88 30       	cpi	r24, 0x08	; 8
    1312:	71 f4       	brne	.+28     	; 0x1330 <Timer_vidTimer1Init+0xc2>
	{
#if Timer1_PhaseCorrectPWMCmprOtptMode == Timer1_OC1AorBDisconnected
		CLEAR_BIT(TCCR1A,7); //for channel A
    1314:	af e4       	ldi	r26, 0x4F	; 79
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ef e4       	ldi	r30, 0x4F	; 79
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8f 77       	andi	r24, 0x7F	; 127
    1320:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,6); //for channel A
    1322:	af e4       	ldi	r26, 0x4F	; 79
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	ef e4       	ldi	r30, 0x4F	; 79
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8f 7b       	andi	r24, 0xBF	; 191
    132e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6); //for channel A

#endif
	}

	if(mode == Timer1_NonPWM && channel == Timer1_ChannelB)
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	85 30       	cpi	r24, 0x05	; 5
    1334:	91 f4       	brne	.+36     	; 0x135a <Timer_vidTimer1Init+0xec>
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	89 30       	cpi	r24, 0x09	; 9
    133a:	79 f4       	brne	.+30     	; 0x135a <Timer_vidTimer1Init+0xec>
	{
#if Timer1_NonPWMCmprOtptMode == Timer1_OC1AorBDisconnected
		CLEAR_BIT(TCCR1A,5); //for channel B
    133c:	af e4       	ldi	r26, 0x4F	; 79
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	ef e4       	ldi	r30, 0x4F	; 79
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8f 7d       	andi	r24, 0xDF	; 223
    1348:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,4); //for channel B
    134a:	af e4       	ldi	r26, 0x4F	; 79
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ef e4       	ldi	r30, 0x4F	; 79
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8f 7e       	andi	r24, 0xEF	; 239
    1356:	8c 93       	st	X, r24
    1358:	29 c0       	rjmp	.+82     	; 0x13ac <Timer_vidTimer1Init+0x13e>

	/************************************************/

	//compare output mode for Fast PWM

	else if (mode == Timer1_FastPWM && channel == Timer1_ChannelB)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	86 30       	cpi	r24, 0x06	; 6
    135e:	91 f4       	brne	.+36     	; 0x1384 <Timer_vidTimer1Init+0x116>
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	89 30       	cpi	r24, 0x09	; 9
    1364:	79 f4       	brne	.+30     	; 0x1384 <Timer_vidTimer1Init+0x116>
#elif Timer1_FastPWMCmprOtptMode == Timer1_TggleOC1AOnCmprMatchAndOC1BDisconnected
		CLEAR_BIT(TCCR1A,5); //for channel B
		SET_BIT(TCCR1A,4); //for channel B

#elif Timer1_FastPWMCmprOtptMode == Timer1_ClrOC1AorBOnCmprMatchAndSetOC1AorBAtTOP
		SET_BIT(TCCR1A,5); //for channel B
    1366:	af e4       	ldi	r26, 0x4F	; 79
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	ef e4       	ldi	r30, 0x4F	; 79
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	80 62       	ori	r24, 0x20	; 32
    1372:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,4); //for channel B
    1374:	af e4       	ldi	r26, 0x4F	; 79
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ef e4       	ldi	r30, 0x4F	; 79
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8f 7e       	andi	r24, 0xEF	; 239
    1380:	8c 93       	st	X, r24
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <Timer_vidTimer1Init+0x13e>

	//************************************/

	//compare Output mode for Phase and Frequency Correct PWM

	else if (mode == Timer1_PhaseAndFreqCorrect && channel == Timer1_ChannelB)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	87 30       	cpi	r24, 0x07	; 7
    1388:	89 f4       	brne	.+34     	; 0x13ac <Timer_vidTimer1Init+0x13e>
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	89 30       	cpi	r24, 0x09	; 9
    138e:	71 f4       	brne	.+28     	; 0x13ac <Timer_vidTimer1Init+0x13e>
	{
#if Timer1_PhaseCorrectPWMCmprOtptMode == Timer1_OC1AorBDisconnected
		CLEAR_BIT(TCCR1A,5); //for channel B
    1390:	af e4       	ldi	r26, 0x4F	; 79
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ef e4       	ldi	r30, 0x4F	; 79
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8f 7d       	andi	r24, 0xDF	; 223
    139c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,4); //for channel B
    139e:	af e4       	ldi	r26, 0x4F	; 79
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	ef e4       	ldi	r30, 0x4F	; 79
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	8f 7e       	andi	r24, 0xEF	; 239
    13aa:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,2);
	CLEAR_BIT(TCCR1B,1);
	SET_BIT(TCCR1B,0);

#elif Timer1_Prescaller ==Timer1_DivisionFactor8
	CLEAR_BIT(TCCR1B,2);
    13ac:	ae e4       	ldi	r26, 0x4E	; 78
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ee e4       	ldi	r30, 0x4E	; 78
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8b 7f       	andi	r24, 0xFB	; 251
    13b8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    13ba:	ae e4       	ldi	r26, 0x4E	; 78
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ee e4       	ldi	r30, 0x4E	; 78
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	82 60       	ori	r24, 0x02	; 2
    13c6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,0);
    13c8:	ae e4       	ldi	r26, 0x4E	; 78
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ee e4       	ldi	r30, 0x4E	; 78
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	8c 93       	st	X, r24
#if Timer1_OutputCmprMatchAIntr == Timer1_OutputCmprMatchAIntrEnable
	SET_BIT(SREG,7);
	SET_BIT(TIMSK,4);

#elif Timer1_OutputCmprMatchAIntr == Timer1_OutputCmprMatchAIntrDisable
	CLEAR_BIT(TIMSK,4);
    13d6:	a9 e5       	ldi	r26, 0x59	; 89
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e9 e5       	ldi	r30, 0x59	; 89
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7e       	andi	r24, 0xEF	; 239
    13e2:	8c 93       	st	X, r24
#if Timer1_OutputCmprMatchBIntr == Timer1_OutputCmprMatchBIntrEnable
	SET_BIT(SREG,7);
	SET_BIT(TIMSK,3);

#elif Timer1_OutputCmprMatchBIntr == Timer1_OutputCmprMatchBIntrDisable
	CLEAR_BIT(TIMSK,3);
    13e4:	a9 e5       	ldi	r26, 0x59	; 89
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e9 e5       	ldi	r30, 0x59	; 89
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	8c 93       	st	X, r24
#if Timer1_OverflowIntr == Timer1_OverflowIntrEnable
	SET_BIT(SREG,7);
	SET_BIT(TIMSK,2);

#elif Timer1_OverflowIntr == Timer1_OverflowIntrDisable
	CLEAR_BIT(TIMSK,2);
    13f2:	a9 e5       	ldi	r26, 0x59	; 89
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e9 e5       	ldi	r30, 0x59	; 89
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8b 7f       	andi	r24, 0xFB	; 251
    13fe:	8c 93       	st	X, r24

#endif

}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <Timer_vidTimer2Init>:

void Timer_vidTimer2Init(u8 mode)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	0f 92       	push	r0
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	89 83       	std	Y+1, r24	; 0x01
	if(mode == Timer2_NormalMode)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	8a 30       	cpi	r24, 0x0A	; 10
    141a:	e9 f4       	brne	.+58     	; 0x1456 <Timer_vidTimer2Init+0x4c>
	{
		CLEAR_BIT(TCCR2,3);
    141c:	a5 e4       	ldi	r26, 0x45	; 69
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e4       	ldi	r30, 0x45	; 69
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	87 7f       	andi	r24, 0xF7	; 247
    1428:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,6);
    142a:	a5 e4       	ldi	r26, 0x45	; 69
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e4       	ldi	r30, 0x45	; 69
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8f 7b       	andi	r24, 0xBF	; 191
    1436:	8c 93       	st	X, r24

		//compare Output mode
#if Timer2_NonPWMCmprOtptMode == Timer2_OC2Disconnected
		CLEAR_BIT(TCCR2,5);
    1438:	a5 e4       	ldi	r26, 0x45	; 69
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e4       	ldi	r30, 0x45	; 69
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 7d       	andi	r24, 0xDF	; 223
    1444:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,4);
    1446:	a5 e4       	ldi	r26, 0x45	; 69
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e5 e4       	ldi	r30, 0x45	; 69
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8f 7e       	andi	r24, 0xEF	; 239
    1452:	8c 93       	st	X, r24
    1454:	5f c0       	rjmp	.+190    	; 0x1514 <Timer_vidTimer2Init+0x10a>

#endif
		/******************************************************/

	}
	else if(mode == Timer2_PWMPhaseCorrect)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	8b 30       	cpi	r24, 0x0B	; 11
    145a:	e9 f4       	brne	.+58     	; 0x1496 <Timer_vidTimer2Init+0x8c>
	{
		CLEAR_BIT(TCCR2,3);
    145c:	a5 e4       	ldi	r26, 0x45	; 69
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e4       	ldi	r30, 0x45	; 69
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	87 7f       	andi	r24, 0xF7	; 247
    1468:	8c 93       	st	X, r24
		SET_BIT(TCCR2,6);
    146a:	a5 e4       	ldi	r26, 0x45	; 69
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e4       	ldi	r30, 0x45	; 69
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 64       	ori	r24, 0x40	; 64
    1476:	8c 93       	st	X, r24
#if Timer2_PhaseCorrectPWMCmprOtptMode == Timer2_OC0Disconnected
		CLEAR_BIT(TCCR2,5);
		CLEAR_BIT(TCCR2,4);

#elif Timer2_PhaseCorrectPWMCmprOtptMode == Timer2_ClrOC2UpCountingAndSetOC2DownCouning
		SET_BIT(TCCR2,5);
    1478:	a5 e4       	ldi	r26, 0x45	; 69
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e4       	ldi	r30, 0x45	; 69
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 62       	ori	r24, 0x20	; 32
    1484:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,4);
    1486:	a5 e4       	ldi	r26, 0x45	; 69
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e4       	ldi	r30, 0x45	; 69
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8f 7e       	andi	r24, 0xEF	; 239
    1492:	8c 93       	st	X, r24
    1494:	3f c0       	rjmp	.+126    	; 0x1514 <Timer_vidTimer2Init+0x10a>

#endif
		/*******************************************************/

	}
	else if(mode == Timer2_CTC)
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	8c 30       	cpi	r24, 0x0C	; 12
    149a:	e9 f4       	brne	.+58     	; 0x14d6 <Timer_vidTimer2Init+0xcc>
	{
		SET_BIT(TCCR2,3);
    149c:	a5 e4       	ldi	r26, 0x45	; 69
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e4       	ldi	r30, 0x45	; 69
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	88 60       	ori	r24, 0x08	; 8
    14a8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,6);
    14aa:	a5 e4       	ldi	r26, 0x45	; 69
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e4       	ldi	r30, 0x45	; 69
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8f 7b       	andi	r24, 0xBF	; 191
    14b6:	8c 93       	st	X, r24

		//compare Output mode
#if Timer2_NonPWMCmprOtptMode == Timer2_OC2Disconnected
		CLEAR_BIT(TCCR2,5);
    14b8:	a5 e4       	ldi	r26, 0x45	; 69
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e4       	ldi	r30, 0x45	; 69
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 7d       	andi	r24, 0xDF	; 223
    14c4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,4);
    14c6:	a5 e4       	ldi	r26, 0x45	; 69
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e4       	ldi	r30, 0x45	; 69
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7e       	andi	r24, 0xEF	; 239
    14d2:	8c 93       	st	X, r24
    14d4:	1f c0       	rjmp	.+62     	; 0x1514 <Timer_vidTimer2Init+0x10a>

#endif
		/********************************************************/

	}
	else if(mode == Timer2_FastPWM)
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	8d 30       	cpi	r24, 0x0D	; 13
    14da:	e1 f4       	brne	.+56     	; 0x1514 <Timer_vidTimer2Init+0x10a>
	{
		SET_BIT(TCCR2,3);
    14dc:	a5 e4       	ldi	r26, 0x45	; 69
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e4       	ldi	r30, 0x45	; 69
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 60       	ori	r24, 0x08	; 8
    14e8:	8c 93       	st	X, r24
		SET_BIT(TCCR2,6);
    14ea:	a5 e4       	ldi	r26, 0x45	; 69
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e4       	ldi	r30, 0x45	; 69
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 64       	ori	r24, 0x40	; 64
    14f6:	8c 93       	st	X, r24
#if Timer2_FastPWMCmprOtptMode == Timer2_OC2Disconnected
		CLEAR_BIT(TCCR2,5);
		CLEAR_BIT(TCCR2,4);

#elif Timer2_FastPWMCmprOtptMode == Timer2_ClrOC2OnCmprMatchAndSetOC2AtTOP
		SET_BIT(TCCR2,5);
    14f8:	a5 e4       	ldi	r26, 0x45	; 69
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e4       	ldi	r30, 0x45	; 69
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	80 62       	ori	r24, 0x20	; 32
    1504:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,4);
    1506:	a5 e4       	ldi	r26, 0x45	; 69
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e5 e4       	ldi	r30, 0x45	; 69
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8f 7e       	andi	r24, 0xEF	; 239
    1512:	8c 93       	st	X, r24
	SET_BIT(TCCR2,2);
	SET_BIT(TCCR2,1);
	CLEAR_BIT(TCCR2,0);

#elif Timer2_Prescaller ==Timer2_DivisionFactor1024
	SET_BIT(TCCR2,2);
    1514:	a5 e4       	ldi	r26, 0x45	; 69
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e4       	ldi	r30, 0x45	; 69
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	84 60       	ori	r24, 0x04	; 4
    1520:	8c 93       	st	X, r24
	SET_BIT(TCCR2,1);
    1522:	a5 e4       	ldi	r26, 0x45	; 69
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e4       	ldi	r30, 0x45	; 69
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	82 60       	ori	r24, 0x02	; 2
    152e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,0);
    1530:	a5 e4       	ldi	r26, 0x45	; 69
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e4       	ldi	r30, 0x45	; 69
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24
	/**********************************************************/

	//******************output compare match interrupt

#if Timer2_OutputCmprMatchIntr == Timer2_OutputCmprMatchIntrEnable
	SET_BIT(SREG,7);
    153e:	af e5       	ldi	r26, 0x5F	; 95
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ef e5       	ldi	r30, 0x5F	; 95
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	80 68       	ori	r24, 0x80	; 128
    154a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,7);
    154c:	a9 e5       	ldi	r26, 0x59	; 89
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e9 e5       	ldi	r30, 0x59	; 89
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	8c 93       	st	X, r24
#if Timer2_OverflowIntr == Timer2_OverflowIntrEnable
	SET_BIT(SREG,7);
	SET_BIT(TIMSK,6);

#elif Timer2_OverflowIntr == Timer2_OverflowIntrDisable
	CLEAR_BIT(TIMSK,6);
    155a:	a9 e5       	ldi	r26, 0x59	; 89
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e9 e5       	ldi	r30, 0x59	; 89
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 7b       	andi	r24, 0xBF	; 191
    1566:	8c 93       	st	X, r24
#endif
	/**************************************************/

	//*****************CLOCK selection
#if Timer2_Clock == Timer2_InternalClk
	CLEAR_BIT(ASSR,3);
    1568:	a2 e4       	ldi	r26, 0x42	; 66
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e2 e4       	ldi	r30, 0x42	; 66
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	87 7f       	andi	r24, 0xF7	; 247
    1574:	8c 93       	st	X, r24

#endif
	/*********************************************/


}
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <Timer_vidSetTimer0IntialVal>:

//****************************************************/

void Timer_vidSetTimer0IntialVal(u8 value)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=value;
    158a:	e2 e5       	ldi	r30, 0x52	; 82
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	80 83       	st	Z, r24
}
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <Timer_vidSetTimer1IntialVal>:

void Timer_vidSetTimer1IntialVal(u16 value)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <Timer_vidSetTimer1IntialVal+0x6>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 =value;
    15a8:	ec e4       	ldi	r30, 0x4C	; 76
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	91 83       	std	Z+1, r25	; 0x01
    15b2:	80 83       	st	Z, r24
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <Timer_vidSetTimer2IntialVal>:

void Timer_vidSetTimer2IntialVal(u8 value)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=value;
    15ca:	e4 e4       	ldi	r30, 0x44	; 68
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	80 83       	st	Z, r24
}
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <Timer_vidSetTimer0CmprVal>:

//********************************************************/

void Timer_vidSetTimer0CmprVal(u8 value)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	0f 92       	push	r0
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	89 83       	std	Y+1, r24	; 0x01
	OCR0=value;
    15e6:	ec e5       	ldi	r30, 0x5C	; 92
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	80 83       	st	Z, r24
}
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <Timer_vidSetTimer1CmprValA>:

void Timer_vidSetTimer1CmprValA(u16 value) //for chanel A
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <Timer_vidSetTimer1CmprValA+0x6>
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=value;
    1604:	ea e4       	ldi	r30, 0x4A	; 74
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Timer_vidSetTimer1CmprValB>:

void Timer_vidSetTimer1CmprValB(u16 value) //for channel B
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <Timer_vidSetTimer1CmprValB+0x6>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=value;
    1628:	e8 e4       	ldi	r30, 0x48	; 72
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <Timer_vidSetTimer2CmprVal>:

void Timer_vidSetTimer2CmprVal(u8 value)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
	OCR2=value;
    164a:	e3 e4       	ldi	r30, 0x43	; 67
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	80 83       	st	Z, r24
}
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <Timer_vidSetTimer1TopVal>:

void Timer_vidSetTimer1TopVal(u16 value)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <Timer_vidSetTimer1TopVal+0x6>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	9a 83       	std	Y+2, r25	; 0x02
    1666:	89 83       	std	Y+1, r24	; 0x01
	ICR1=value;
    1668:	e6 e4       	ldi	r30, 0x46	; 70
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	91 83       	std	Z+1, r25	; 0x01
    1672:	80 83       	st	Z, r24
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <Timer_vidGeneratePWM>:


void Timer_vidGeneratePWM(u32 freq,u16 time_on,u8 channel)
{
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	00 d0       	rcall	.+0      	; 0x1688 <Timer_vidGeneratePWM+0xa>
    1688:	00 d0       	rcall	.+0      	; 0x168a <Timer_vidGeneratePWM+0xc>
    168a:	0f 92       	push	r0
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	7c 83       	std	Y+4, r23	; 0x04
    1696:	6b 83       	std	Y+3, r22	; 0x03
    1698:	4d 83       	std	Y+5, r20	; 0x05
	if(channel == Timer1_ChannelA)
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	88 30       	cpi	r24, 0x08	; 8
    169e:	79 f4       	brne	.+30     	; 0x16be <Timer_vidGeneratePWM+0x40>
	{
		SET_BIT(TCCR1A,7); //for channel A   (for clear on compare match and set on top)
    16a0:	af e4       	ldi	r26, 0x4F	; 79
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	ef e4       	ldi	r30, 0x4F	; 79
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	80 68       	ori	r24, 0x80	; 128
    16ac:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,6); //for channel A (for clear on compare match and set on top)
    16ae:	af e4       	ldi	r26, 0x4F	; 79
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ef e4       	ldi	r30, 0x4F	; 79
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	8f 7b       	andi	r24, 0xBF	; 191
    16ba:	8c 93       	st	X, r24
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <Timer_vidGeneratePWM+0x62>
	}
	else if (channel == Timer1_ChannelB)
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	89 30       	cpi	r24, 0x09	; 9
    16c2:	71 f4       	brne	.+28     	; 0x16e0 <Timer_vidGeneratePWM+0x62>
	{
		SET_BIT(TCCR1A,5); //for channel B    (for clear on compare match and set on top)
    16c4:	af e4       	ldi	r26, 0x4F	; 79
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ef e4       	ldi	r30, 0x4F	; 79
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 62       	ori	r24, 0x20	; 32
    16d0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,4); //for channel B  (for clear on compare match and set on top)
    16d2:	af e4       	ldi	r26, 0x4F	; 79
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ef e4       	ldi	r30, 0x4F	; 79
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7e       	andi	r24, 0xEF	; 239
    16de:	8c 93       	st	X, r24
	}

	//for initialization of timer 1
	SET_BIT(TCCR1B,4);   //for PWM and ICR1 is top
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 61       	ori	r24, 0x10	; 16
    16ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);   //for PWM and ICR1 is top
    16ee:	ae e4       	ldi	r26, 0x4E	; 78
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ee e4       	ldi	r30, 0x4E	; 78
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 60       	ori	r24, 0x08	; 8
    16fa:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);   //for PWM and ICR1 is top
    16fc:	af e4       	ldi	r26, 0x4F	; 79
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ef e4       	ldi	r30, 0x4F	; 79
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	82 60       	ori	r24, 0x02	; 2
    1708:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,0); //for PWM and ICR1 is top
    170a:	af e4       	ldi	r26, 0x4F	; 79
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ef e4       	ldi	r30, 0x4F	; 79
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8e 7f       	andi	r24, 0xFE	; 254
    1716:	8c 93       	st	X, r24


	CLEAR_BIT(TCCR1B,2);  //for prescaller factor = 8
    1718:	ae e4       	ldi	r26, 0x4E	; 78
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ee e4       	ldi	r30, 0x4E	; 78
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8b 7f       	andi	r24, 0xFB	; 251
    1724:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);    //for prescaller factor = 8
    1726:	ae e4       	ldi	r26, 0x4E	; 78
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ee e4       	ldi	r30, 0x4E	; 78
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	82 60       	ori	r24, 0x02	; 2
    1732:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,0);  //for prescaller factor = 8
    1734:	ae e4       	ldi	r26, 0x4E	; 78
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ee e4       	ldi	r30, 0x4E	; 78
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8e 7f       	andi	r24, 0xFE	; 254
    1740:	8c 93       	st	X, r24

	CLEAR_BIT(TIMSK,4);  //to disable all interrupt sources from timer1
    1742:	a9 e5       	ldi	r26, 0x59	; 89
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e9 e5       	ldi	r30, 0x59	; 89
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 7e       	andi	r24, 0xEF	; 239
    174e:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,3);  //to disable all interrupt sources from timer1
    1750:	a9 e5       	ldi	r26, 0x59	; 89
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 e5       	ldi	r30, 0x59	; 89
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	87 7f       	andi	r24, 0xF7	; 247
    175c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,2);  //to disable all interrupt sources from timer1
    175e:	a9 e5       	ldi	r26, 0x59	; 89
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e9 e5       	ldi	r30, 0x59	; 89
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8b 7f       	andi	r24, 0xFB	; 251
    176a:	8c 93       	st	X, r24
	//********************************************************************/

	ICR1=(u16)(1000000/freq); //frequency range from 1 Hz to 1 MHZ
    176c:	06 e4       	ldi	r16, 0x46	; 70
    176e:	10 e0       	ldi	r17, 0x00	; 0
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	9c 01       	movw	r18, r24
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	80 e4       	ldi	r24, 0x40	; 64
    177c:	92 e4       	ldi	r25, 0x42	; 66
    177e:	af e0       	ldi	r26, 0x0F	; 15
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divmodsi4>
    178a:	da 01       	movw	r26, r20
    178c:	c9 01       	movw	r24, r18
    178e:	f8 01       	movw	r30, r16
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	80 83       	st	Z, r24

	if(channel == Timer1_ChannelA)
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	88 30       	cpi	r24, 0x08	; 8
    1798:	71 f4       	brne	.+28     	; 0x17b6 <Timer_vidGeneratePWM+0x138>
	{
		SET_BIT(DDRD,5);
    179a:	a1 e3       	ldi	r26, 0x31	; 49
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e1 e3       	ldi	r30, 0x31	; 49
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 62       	ori	r24, 0x20	; 32
    17a6:	8c 93       	st	X, r24
		OCR1A=time_on;
    17a8:	ea e4       	ldi	r30, 0x4A	; 74
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
    17b4:	10 c0       	rjmp	.+32     	; 0x17d6 <Timer_vidGeneratePWM+0x158>
	}
	else if (channel == Timer1_ChannelB)
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	89 30       	cpi	r24, 0x09	; 9
    17ba:	69 f4       	brne	.+26     	; 0x17d6 <Timer_vidGeneratePWM+0x158>
	{
		SET_BIT(DDRD,4);
    17bc:	a1 e3       	ldi	r26, 0x31	; 49
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e1 e3       	ldi	r30, 0x31	; 49
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 61       	ori	r24, 0x10	; 16
    17c8:	8c 93       	st	X, r24
		OCR1B=time_on;
    17ca:	e8 e4       	ldi	r30, 0x48	; 72
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	80 83       	st	Z, r24
	}

}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	08 95       	ret

000017ea <main>:
#include <util/delay.h>

u16 timerOFCount=0;

int main(void)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
	while(1);
	 */


	//for servo
	Timer_vidGeneratePWM(50,2610,Timer1_ChannelA);
    17f2:	82 e3       	ldi	r24, 0x32	; 50
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	62 e3       	ldi	r22, 0x32	; 50
    17f8:	7a e0       	ldi	r23, 0x0A	; 10
    17fa:	48 e0       	ldi	r20, 0x08	; 8
    17fc:	0e 94 3f 0b 	call	0x167e	; 0x167e <Timer_vidGeneratePWM>
    1800:	ff cf       	rjmp	.-2      	; 0x1800 <main+0x16>

00001802 <__vector_11>:
	while(1);

}

ISR(TIMER0_OVF_vect)  //for lab1 lec 9
{
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	2e 97       	sbiw	r28, 0x0e	; 14
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	cd bf       	out	0x3d, r28	; 61

	if(timerOFCount == 305)
    1832:	80 91 68 00 	lds	r24, 0x0068
    1836:	90 91 69 00 	lds	r25, 0x0069
    183a:	21 e0       	ldi	r18, 0x01	; 1
    183c:	81 33       	cpi	r24, 0x31	; 49
    183e:	92 07       	cpc	r25, r18
    1840:	09 f0       	breq	.+2      	; 0x1844 <__vector_11+0x42>
    1842:	82 c0       	rjmp	.+260    	; 0x1948 <__vector_11+0x146>
	{
		Dio_vidSetPinDir(DIO_u8PIN_0,DIO_u8OUTPUT);
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8HIGH);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a6 e9       	ldi	r26, 0x96	; 150
    185a:	b3 e4       	ldi	r27, 0x43	; 67
    185c:	8b 87       	std	Y+11, r24	; 0x0b
    185e:	9c 87       	std	Y+12, r25	; 0x0c
    1860:	ad 87       	std	Y+13, r26	; 0x0d
    1862:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1864:	6b 85       	ldd	r22, Y+11	; 0x0b
    1866:	7c 85       	ldd	r23, Y+12	; 0x0c
    1868:	8d 85       	ldd	r24, Y+13	; 0x0d
    186a:	9e 85       	ldd	r25, Y+14	; 0x0e
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a ef       	ldi	r20, 0xFA	; 250
    1872:	54 e4       	ldi	r21, 0x44	; 68
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8f 83       	std	Y+7, r24	; 0x07
    187e:	98 87       	std	Y+8, r25	; 0x08
    1880:	a9 87       	std	Y+9, r26	; 0x09
    1882:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e8       	ldi	r20, 0x80	; 128
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1898:	88 23       	and	r24, r24
    189a:	2c f4       	brge	.+10     	; 0x18a6 <__vector_11+0xa4>
		__ticks = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	3f c0       	rjmp	.+126    	; 0x1924 <__vector_11+0x122>
	else if (__tmp > 65535)
    18a6:	6f 81       	ldd	r22, Y+7	; 0x07
    18a8:	78 85       	ldd	r23, Y+8	; 0x08
    18aa:	89 85       	ldd	r24, Y+9	; 0x09
    18ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 e4       	ldi	r21, 0x47	; 71
    18b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	4c f5       	brge	.+82     	; 0x1910 <__vector_11+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <__vector_11+0x104>
    18e8:	88 ec       	ldi	r24, 0xC8	; 200
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9c 83       	std	Y+4, r25	; 0x04
    18ee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <__vector_11+0xf2>
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1906:	8d 81       	ldd	r24, Y+5	; 0x05
    1908:	9e 81       	ldd	r25, Y+6	; 0x06
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	69 f7       	brne	.-38     	; 0x18e8 <__vector_11+0xe6>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <__vector_11+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1910:	6f 81       	ldd	r22, Y+7	; 0x07
    1912:	78 85       	ldd	r23, Y+8	; 0x08
    1914:	89 85       	ldd	r24, Y+9	; 0x09
    1916:	9a 85       	ldd	r25, Y+10	; 0x0a
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	9e 81       	ldd	r25, Y+6	; 0x06
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <__vector_11+0x12e>
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		timerOFCount=0;
    1938:	10 92 69 00 	sts	0x0069, r1
    193c:	10 92 68 00 	sts	0x0068, r1
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	}
	timerOFCount++;
    1948:	80 91 68 00 	lds	r24, 0x0068
    194c:	90 91 69 00 	lds	r25, 0x0069
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	90 93 69 00 	sts	0x0069, r25
    1956:	80 93 68 00 	sts	0x0068, r24
}
    195a:	2e 96       	adiw	r28, 0x0e	; 14
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	0f 90       	pop	r0
    1982:	1f 90       	pop	r1
    1984:	18 95       	reti

00001986 <__divmodsi4>:
    1986:	97 fb       	bst	r25, 7
    1988:	09 2e       	mov	r0, r25
    198a:	05 26       	eor	r0, r21
    198c:	0e d0       	rcall	.+28     	; 0x19aa <__divmodsi4_neg1>
    198e:	57 fd       	sbrc	r21, 7
    1990:	04 d0       	rcall	.+8      	; 0x199a <__divmodsi4_neg2>
    1992:	14 d0       	rcall	.+40     	; 0x19bc <__udivmodsi4>
    1994:	0a d0       	rcall	.+20     	; 0x19aa <__divmodsi4_neg1>
    1996:	00 1c       	adc	r0, r0
    1998:	38 f4       	brcc	.+14     	; 0x19a8 <__divmodsi4_exit>

0000199a <__divmodsi4_neg2>:
    199a:	50 95       	com	r21
    199c:	40 95       	com	r20
    199e:	30 95       	com	r19
    19a0:	21 95       	neg	r18
    19a2:	3f 4f       	sbci	r19, 0xFF	; 255
    19a4:	4f 4f       	sbci	r20, 0xFF	; 255
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255

000019a8 <__divmodsi4_exit>:
    19a8:	08 95       	ret

000019aa <__divmodsi4_neg1>:
    19aa:	f6 f7       	brtc	.-4      	; 0x19a8 <__divmodsi4_exit>
    19ac:	90 95       	com	r25
    19ae:	80 95       	com	r24
    19b0:	70 95       	com	r23
    19b2:	61 95       	neg	r22
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	8f 4f       	sbci	r24, 0xFF	; 255
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	08 95       	ret

000019bc <__udivmodsi4>:
    19bc:	a1 e2       	ldi	r26, 0x21	; 33
    19be:	1a 2e       	mov	r1, r26
    19c0:	aa 1b       	sub	r26, r26
    19c2:	bb 1b       	sub	r27, r27
    19c4:	fd 01       	movw	r30, r26
    19c6:	0d c0       	rjmp	.+26     	; 0x19e2 <__udivmodsi4_ep>

000019c8 <__udivmodsi4_loop>:
    19c8:	aa 1f       	adc	r26, r26
    19ca:	bb 1f       	adc	r27, r27
    19cc:	ee 1f       	adc	r30, r30
    19ce:	ff 1f       	adc	r31, r31
    19d0:	a2 17       	cp	r26, r18
    19d2:	b3 07       	cpc	r27, r19
    19d4:	e4 07       	cpc	r30, r20
    19d6:	f5 07       	cpc	r31, r21
    19d8:	20 f0       	brcs	.+8      	; 0x19e2 <__udivmodsi4_ep>
    19da:	a2 1b       	sub	r26, r18
    19dc:	b3 0b       	sbc	r27, r19
    19de:	e4 0b       	sbc	r30, r20
    19e0:	f5 0b       	sbc	r31, r21

000019e2 <__udivmodsi4_ep>:
    19e2:	66 1f       	adc	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	88 1f       	adc	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	1a 94       	dec	r1
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <__udivmodsi4_loop>
    19ee:	60 95       	com	r22
    19f0:	70 95       	com	r23
    19f2:	80 95       	com	r24
    19f4:	90 95       	com	r25
    19f6:	9b 01       	movw	r18, r22
    19f8:	ac 01       	movw	r20, r24
    19fa:	bd 01       	movw	r22, r26
    19fc:	cf 01       	movw	r24, r30
    19fe:	08 95       	ret

00001a00 <__prologue_saves__>:
    1a00:	2f 92       	push	r2
    1a02:	3f 92       	push	r3
    1a04:	4f 92       	push	r4
    1a06:	5f 92       	push	r5
    1a08:	6f 92       	push	r6
    1a0a:	7f 92       	push	r7
    1a0c:	8f 92       	push	r8
    1a0e:	9f 92       	push	r9
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	ca 1b       	sub	r28, r26
    1a2a:	db 0b       	sbc	r29, r27
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	09 94       	ijmp

00001a38 <__epilogue_restores__>:
    1a38:	2a 88       	ldd	r2, Y+18	; 0x12
    1a3a:	39 88       	ldd	r3, Y+17	; 0x11
    1a3c:	48 88       	ldd	r4, Y+16	; 0x10
    1a3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1a4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1a4e:	df 80       	ldd	r13, Y+7	; 0x07
    1a50:	ee 80       	ldd	r14, Y+6	; 0x06
    1a52:	fd 80       	ldd	r15, Y+5	; 0x05
    1a54:	0c 81       	ldd	r16, Y+4	; 0x04
    1a56:	1b 81       	ldd	r17, Y+3	; 0x03
    1a58:	aa 81       	ldd	r26, Y+2	; 0x02
    1a5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a5c:	ce 0f       	add	r28, r30
    1a5e:	d1 1d       	adc	r29, r1
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	ed 01       	movw	r28, r26
    1a6c:	08 95       	ret

00001a6e <_exit>:
    1a6e:	f8 94       	cli

00001a70 <__stop_program>:
    1a70:	ff cf       	rjmp	.-2      	; 0x1a70 <__stop_program>
